{"version":3,"sources":["../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_box-sizing.scss","../../node_modules/spacelift/sass/grid/_layout.scss","../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_outer-container.scss","../../node_modules/bourbon-neat/app/assets/stylesheets/settings/_grid.scss","../../node_modules/bourbon-neat/app/assets/stylesheets/mixins/_clearfix.scss","../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_span-columns.scss","../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_private.scss","components/View/VideoGallery.scss","mixins/_OuterPadding.scss","../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_media.scss","mixins/_ListingView.scss","settings/_variables.scss"],"names":[],"mappings":"AAGE,KACE,qBAAuB,CACxB,AAED,mBAII,kBAAoB,CACrB,ACLL,oCCqBE,iBCJgB,ADKhB,iBACa,AADb,iBAEc,CDrBX,AAHL,sGGaI,WAAY,AACZ,WAAY,AACZ,aAAe,CAChB,AHVH,uEIsDI,WAAO,AAGL,cAAe,AAef,sBCtEc,ADuEd,eC5Ec,CLMf,AAHL,uXI4EQ,cAA+B,CAChC,AJnEP,mCI4CI,WAAO,AAGL,cAAe,AAef,sBCtEc,ADuEd,UC5Ec,CLgBf,AAHL,uEI4CI,WAAO,AAGL,cAAe,AAef,sBCtEc,ADuEd,eC5Ec,CLoBf,AAPL,oCI+DM,eC5Ec,CLwBf,AM1BL,oDF2DI,WAAO,AAGL,cAAe,AAef,sBCtEc,ADuEd,gBC5Ec,AECd,kBAAA,AAVmB,oBAAA,AAWnB,mBAAA,AAXmB,oBAAA,CDUtB,AE2EC,qCF9EJ,oDCmBQ,eAAgB,AAChB,eAAiB,CDjBtB,CAAA,AAHH,uEGOI,gBCgCa,AD/Bb,WAAa,AACb,kBAAA,AAAoB,kBAAA,AACpB,gBAAkB,AAClB,kBAAqB,CACtB,AHZH,qEF2DI,WAAO,AAGL,cAAe,AAef,sBCtEc,ADuEd,WC5Ec,AImBd,kBAAkB,AAClB,gBAAiB,AAQjB,+BCQa,CDIhB,AH1CH,iFGyBQ,aAAe,CAChB,AH1BP,gFGiCQ,kBAAoB,CACrB,AHlCP,uEGwCM,eAAiB,CAClB","file":"../../../components/View/VideoGallery.css","sourcesContent":["@charset \"UTF-8\";\n\n@if $border-box-sizing == true {\n  html { // http://bit.ly/1qk2tVR\n    box-sizing: border-box;\n  }\n\n  * {\n    &,\n    &::after,\n    &::before {\n      box-sizing: inherit;\n    }\n  }\n}\n","// Base variables\n$columns-sidebar: 4 !default;\n$columns-sidebar--twoSidebars: 3 !default;\n$columns-content: 12 !default;\n$columns-content--oneSidebar: 8 !default;\n$columns-content--twoSidebars: 6 !default;\n\n.PageSection {\n    .PageSection-container {\n        @include outer-container;\n    }\n}\n\n.PageSection--sidebar {\n    .one-sidebar & {\n        @include span-columns($columns-sidebar);\n    }\n\n    .two-sidebars & {\n        @include span-columns($columns-sidebar--twoSidebars);\n    }\n}\n\n.PageSection--content {\n    .no-sidebars & {\n        @include span-columns($columns-content);\n    }\n\n    .one-sidebar & {\n        @include span-columns($columns-content--oneSidebar);\n    }\n\n    .two-sidebars & {\n        @include span-columns($columns-content--twoSidebars);\n    }\n}\n","@charset \"UTF-8\";\n\n/// Makes an element a outer container by centering it in the viewport, clearing its floats, and setting its `max-width`.\n/// Although optional, using `outer-container` is recommended. The mixin can be called on more than one element per page, as long as they are not nested.\n///\n/// @param {Number [unit]} $local-max-width [$max-width]\n///   Max width to be applied to the element. Can be a percentage or a measure.\n///\n/// @example scss - Usage\n///   .element {\n///     @include outer-container(100%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     max-width: 100%;\n///     margin-left: auto;\n///     margin-right: auto;\n///   }\n///\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: table;\n///   }\n\n@mixin outer-container($local-max-width: $max-width) {\n  @include clearfix;\n  max-width: $local-max-width;\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Sets the relative width of a single grid column. The unit used should be the same one used to define `$gutter`. Set with a `!global` flag.\n///\n/// @type Number (Unit)\n\n$column: 4.2358em !default;\n\n/// Sets the relative width of a single grid gutter. The unit used should be the same one used to define `$column`. Set with the `!global` flag.\n///\n/// @type Number (Unit)\n\n$gutter: 1.618em !default;\n\n/// Sets the total number of columns in the grid. Its value can be overridden inside a media query using the `media()` mixin. Set with the `!global` flag.\n///\n/// @type Number (Unitless)\n\n$grid-columns: 12 !default;\n\n/// Sets the max-width property of the element that includes `outer-container()`. Set with the `!global` flag.\n///\n/// @type Number (Unit)\n///\n$max-width: 1200px !default;\n\n/// When set to true, it sets the box-sizing property of all elements to `border-box`. Set with a `!global` flag.\n///\n/// @type Bool\n///\n/// @example css - CSS Output\n///   html {\n///     box-sizing: border-box; }\n///\n///   *, *::after, *::before {\n///     box-sizing: inherit;\n///   }\n\n$border-box-sizing: true !default;\n\n/// Sets the default [media feature](http://www.w3.org/TR/css3-mediaqueries/#media) that `media()` and `new-breakpoint()` revert to when only a breakpoint value is passed. Set with a `!global` flag.\n///\n/// @type String\n\n$default-feature: min-width; // Default @media feature for the breakpoint() mixin\n\n///Sets the default layout direction of the grid. Can be `LTR` or `RTL`. Set with a `!global` flag.\n///\n///@type String\n\n$default-layout-direction: LTR !default;\n","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link http://goo.gl/yP5hiZ\n///\n/// @example scss\n///   .element {\n///     @include clearfix;\n///   }\n///\n/// @example css\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: block;\n///   }\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: block;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.\n///\n/// @param {List} $span\n///   A list containing `$columns`, the unitless number of columns the element spans (required), and `$container-columns`, the number of columns the parent element spans (optional).\n///\n///   If only one value is passed, it is assumed that it's `$columns` and that that `$container-columns` is equal to `$grid-columns`, the total number of columns in the grid.\n///\n///   The values can be separated with any string such as `of`, `/`, etc.\n///\n///   `$columns` also accepts decimals for when it's necessary to break out of the standard grid. E.g. Passing `2.4` in a standard 12 column grid will divide the row into 5 columns.\n///\n/// @param {String} $display [block]\n///   Sets the display property of the element. By default it sets the display property of the element to `block`.\n///\n///   If passed `block-collapse`, it also removes the margin gutter by adding it to the element width.\n///\n///   If passed `table`, it sets the display property to `table-cell` and calculates the width of the element without taking gutters into consideration. The result does not align with the block-based grid.\n///\n/// @example scss - Usage\n///   .element {\n///     @include span-columns(6);\n///\n///    .nested-element {\n///      @include span-columns(2 of 6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///   .element {\n///     display: block;\n///     float: left;\n///     margin-right: 2.35765%;\n///     width: 48.82117%;\n///   }\n///\n///   .element:last-child {\n///     margin-right: 0;\n///   }\n///\n///   .element .nested-element {\n///     display: block;\n///     float: left;\n///     margin-right: 4.82916%;\n///     width: 30.11389%;\n///   }\n///\n///   .element .nested-element:last-child {\n///     margin-right: 0;\n///   }\n\n@mixin span-columns($span: $columns of $container-columns, $display: block) {\n  $columns: nth($span, 1);\n  $container-columns: container-span($span);\n\n  $parent-columns: get-parent-columns($container-columns) !global;\n\n  $direction: get-direction($layout-direction, $default-layout-direction);\n  $opposite-direction: get-opposite-direction($direction);\n\n  $display-table: is-display-table($container-display-table, $display);\n\n  @if $display-table  {\n    display: table-cell;\n    width: percentage($columns / $container-columns);\n  } @else {\n    float: #{$opposite-direction};\n\n    @if $display != no-display {\n      display: block;\n    }\n\n    @if $display == collapse {\n      @include -neat-warn(\"The 'collapse' argument will be deprecated. Use 'block-collapse' instead.\");\n    }\n\n    @if $display == collapse or $display == block-collapse {\n      width: flex-grid($columns, $container-columns) + flex-gutter($container-columns);\n\n      &:last-child {\n        width: flex-grid($columns, $container-columns);\n      }\n\n    } @else {\n      margin-#{$direction}: flex-gutter($container-columns);\n      width: flex-grid($columns, $container-columns);\n\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n  }\n}\n","$parent-columns: $grid-columns !default;\n$fg-column: $column;\n$fg-gutter: $gutter;\n$fg-max-columns: $grid-columns;\n$container-display-table: false !default;\n$layout-direction: LTR !default;\n\n@function flex-grid($columns, $container-columns: $fg-max-columns) {\n  $width: flex-width($columns);\n  $container-width: flex-width($container-columns);\n  @return percentage($width / $container-width);\n}\n\n@function flex-gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter) {\n  $container-width: flex-width($container-columns);\n  @return percentage($gutter / $container-width);\n}\n\n@function flex-width($n, $column-width: $fg-column, $gutter-width: $fg-gutter) {\n  @return $n * $column-width + ($n - 1) * $gutter-width;\n}\n\n@function get-parent-columns($columns) {\n  @if $columns != $grid-columns {\n    $parent-columns: $columns !global;\n  } @else {\n    $parent-columns: $grid-columns !global;\n  }\n\n  @return $parent-columns;\n}\n\n@function is-display-table($container-is-display-table, $display) {\n  @return $container-is-display-table == true or $display == table;\n}\n","@import \"assets\";\n@import \"../../settings/variables\";\n@import \"bourbon\";\n@import \"../../settings/grid-settings\";\n@import \"spacelift/grid\";\n@import \"../../mixins/OuterPadding\";\n@import \"../../mixins/ListingView\";\n\n.ListingView.ListingView--videos {\n  .ListingView-video {\n    @include ListingView(3 of 12);\n  }\n}\n","@mixin OuterPadding(\n  $amount: $spacing-fixed / 2,\n  $breakpoint: $screen-xLargeUp,\n  $reset: false,\n  $side: 'both',\n  $sidebar: false\n) {\n  @if $reset and $side == 'both' {\n    padding: 0 $amount;\n  } @else {\n    @if $side == 'both' {\n      padding-left: $amount;\n      padding-right: $amount;\n    } @else {\n      padding-#{$side}: $amount;\n    }\n  }\n\n  @if $sidebar {\n    @include media($screen-largeUp) {\n      padding-right: 0;\n    }\n  }\n\n  @if $breakpoint {\n    @include media($breakpoint) {\n      @if $side == 'both' {\n        padding-left: 0;\n        padding-right: 0;\n      } @else {\n        padding-#{$side}: 0;\n      }\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n/// Outputs a media-query block with an optional grid context (the total number of columns used in the grid).\n///\n/// @param {List} $query\n///   A list of media query features and values, where each `$feature` should have a corresponding `$value`.\n///   For a list of valid values for `$feature`, click [here](http://www.w3.org/TR/css3-mediaqueries/#media1).\n///\n///   If there is only a single `$value` in `$query`, `$default-feature` is going to be used.\n///\n///   The number of total columns in the grid can be set by passing `$columns` at the end of the list (overrides `$total-columns`).\n///\n///\n/// @param {Number (unitless)} $total-columns [$grid-columns]\n///   - Number of columns to use in the new grid context. Can be set as a shorthand in the first parameter.\n///\n/// @example scss - Usage\n///   .responsive-element {\n///      @include media(769px) {\n///        @include span-columns(6);\n///      }\n///   }\n///\n///  .new-context-element {\n///    @include media(min-width 320px max-width 480px, 6) {\n///      @include span-columns(6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///  @media screen and (min-width: 769px) {\n///    .responsive-element {\n///      display: block;\n///      float: left;\n///      margin-right: 2.35765%;\n///      width: 48.82117%;\n///    }\n///\n///    .responsive-element:last-child {\n///      margin-right: 0;\n///    }\n///  }\n///\n///  @media screen and (min-width: 320px) and (max-width: 480px) {\n///    .new-context-element {\n///      display: block;\n///      float: left;\n///      margin-right: 4.82916%;\n///      width: 100%;\n///    }\n///\n///    .new-context-element:last-child {\n///      margin-right: 0;\n///    }\n///  }\n\n@mixin media($query: $feature $value $columns, $total-columns: $grid-columns) {\n  @if length($query) == 1 {\n    @media screen and ($default-feature: nth($query, 1)) {\n      $default-grid-columns: $grid-columns;\n      $grid-columns: $total-columns !global;\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  } @else {\n    $loop-to: length($query);\n    $media-query: \"screen and \";\n    $default-grid-columns: $grid-columns;\n    $grid-columns: $total-columns !global;\n\n    @if is-not(is-even(length($query))) {\n      $grid-columns: nth($query, $loop-to) !global;\n      $loop-to: $loop-to - 1;\n    }\n\n    $i: 1;\n    @while $i <= $loop-to {\n      $media-query: $media-query + \"(\" + nth($query, $i) + \": \" + nth($query, $i + 1) + \") \";\n\n      @if ($i + 1) != $loop-to {\n        $media-query: $media-query + \"and \";\n      }\n\n      $i: $i + 2;\n    }\n\n    @media #{$media-query} {\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  }\n}\n","@mixin ListingView(\n  $columns: 12 of 12,\n  $outerPadding: true,\n  $titleBackground: $mediumGray,\n  $separator: true,\n  $grid: false\n) {\n  @include span-columns($columns);\n  @include clearfix;\n\n  @if $outerPadding {\n    @include OuterPadding();\n  }\n\n  .ListingView-title {\n    background: $titleBackground;\n    color: white;\n    padding: 0.5em 1rem;\n    margin-top: 0.5em;\n    margin-bottom: 0.5em;\n  }\n\n  .ListingView-row {\n    @include span-columns(12 of 12);\n\n    @if $grid {\n      padding: 0;\n      margin-bottom: $gutter;\n    } @else {\n      padding: $gutter 0;\n      margin-bottom: 0;\n\n      &:first-child {\n        padding-top: 0;\n      }\n    }\n\n    @if $separator {\n      border-bottom: 1px solid $lightGray;\n\n      &:last-child {\n        border-bottom: none;\n      }\n    } @else {\n      border-bottom: none;\n    }\n\n    > * {\n      margin-bottom: 0;\n    }\n  }\n}\n","// Bourbon settings\n//$asset-pipeline: true;\n//$output-bourbon-deprecation-warnings: true;\n//$em-base: 14px;\n$prefix-for-webkit: false;\n$prefix-for-mozilla: false;\n$prefix-for-microsoft: false;\n$prefix-for-opera: false;\n$prefix-for-spec: false;\n\n// Typography\n$fontFamily-base: 'Montserrat', sans-serif;\n$fontFamily-heading: 'Montserrat', sans-serif;\n\n// Font sizes\n$fontSize-base: 0.9rem;\n$fontSize-h1: 1.6em;\n$fontSize-h2: 1.4em;\n$fontSize-h3: 1.3em;\n$fontSize-h4: 1.2em;\n$fontSize-h5: 1.1em;\n$fontSize-h6: 1.0em;\n$fontSize-body: 0.9rem;\n\n// Line heights\n$lineHeight-base: 1.5;\n$lineHeight-heading: 1.2;\n\n// Font weights\n$fontWeight-base: 400;\n$fontWeight-bold: 600;\n$fontWeight-thin: 200;\n\n// Border radii\n$borderRadius-base: 0;\n$borderRadius-button: 6px;\n\n// Spacing\n$spacing-base: $lineHeight-base * 1em;\n$spacing-fixed: 1.5rem;\n$spacing-small: $spacing-base / 2;\n\n// Z-indexes\n$zIndex-base: 0;\n\n// Named colors\n$lightGray: #e9e9e9;\n$mediumGray: #555;\n$darkGray: #38383a;\n$blue: #0051ba;\n$yellow: #f7dd16;\n\n// Assigned colors\n$color-action: $blue;\n$color-actionAccent: white;\n$color-background: white;\n$color-background--alternate: $lightGray;\n$color-background--medium: $mediumGray;\n$color-border: $lightGray;\n$color-border--medium: #909090;\n$color-border--strong: $mediumGray;\n$color-input: $darkGray;\n$color-button: $yellow;\n\n// Font colors\n$fontColor-base: $mediumGray;\n$fontColor-heading: $darkGray;\n$fontColor-footer: white;\n$fontColor-utility: white;\n$fontColor-button: $darkGray;\n\n// Borders\n$borderStyle-base: solid;\n$borderWidth-base: 1px;\n\n// Box shadows\n$boxShadow-base: 0 0 3px $color-border;\n$boxShadow-form: none;\n\n// Forms\n$form-boxShadow: inset 0 1px 3px rgba(#000, 0.06);\n$form-boxShadow--focus: $form-boxShadow, 0 0 5px adjust-color($color-action, $lightness: -5%, $alpha: -0.3);\n$confirmation-checkbox-color: white;\n\n// Animations\n$duration-base: 150ms;\n$timing-base: ease;\n\n"]}